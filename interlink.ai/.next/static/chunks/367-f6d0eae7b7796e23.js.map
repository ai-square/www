{"version":3,"file":"static/chunks/367-f6d0eae7b7796e23.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@floating-ui/core/dist/floating-ui.core.mjs","webpack://_N_E/./node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs","webpack://_N_E/./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs","webpack://_N_E/./node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs","webpack://_N_E/<anon>"],"sourcesContent":["import { getSideAxis, getAlignmentAxis, getAxisLength, getSide, getAlignment, evaluate, getPaddingObject, rectToClientRect, min, clamp, placements, getAlignmentSides, getOppositeAlignmentPlacement, getOppositePlacement, getExpandedPlacements, getOppositeAxisPlacements, sides, max, getOppositeAxis } from '@floating-ui/utils';\nexport { rectToClientRect } from '@floating-ui/utils';\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n      continue;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    ...rects.floating,\n    x,\n    y\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center != offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const overflowAvailableHeight = height - overflow[heightSide];\n      const overflowAvailableWidth = width - overflow[widthSide];\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        const maximumClippingWidth = width - overflow.left - overflow.right;\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        const maximumClippingHeight = height - overflow.top - overflow.bottom;\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nexport { arrow, autoPlacement, computePosition, detectOverflow, flip, hide, inline, limitShift, offset, shift, size };\n","function getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  // Browsers without `ShadowRoot` support.\n  if (typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isContainingBlock(element) {\n  const webkit = isWebKit();\n  const css = getComputedStyle(element);\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else {\n      currentNode = getParentNode(currentNode);\n    }\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.pageXOffset,\n    scrollTop: element.pageYOffset\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\n\nexport { getComputedStyle, getContainingBlock, getDocumentElement, getNearestOverflowAncestor, getNodeName, getNodeScroll, getOverflowAncestors, getParentNode, getWindow, isContainingBlock, isElement, isHTMLElement, isLastTraversableNode, isNode, isOverflowElement, isShadowRoot, isTableElement, isWebKit };\n","import { rectToClientRect, autoPlacement as autoPlacement$1, shift as shift$1, flip as flip$1, size as size$1, hide as hide$1, arrow as arrow$1, inline as inline$1, limitShift as limitShift$1, computePosition as computePosition$1 } from '@floating-ui/core';\nexport { detectOverflow, offset } from '@floating-ui/core';\nimport { round, createCoords, max, min, floor } from '@floating-ui/utils';\nimport { getComputedStyle, isHTMLElement, isElement, getWindow, isWebKit, getDocumentElement, getNodeName, isOverflowElement, getNodeScroll, getOverflowAncestors, getParentNode, isLastTraversableNode, isContainingBlock, isTableElement, getContainingBlock } from '@floating-ui/utils/dom';\nexport { getOverflowAncestors } from '@floating-ui/utils/dom';\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentIFrame = win.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== win) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentIFrame = getWindow(currentIFrame).frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  if (offsetParent === documentElement) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== 'fixed') {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  return {\n    x: rect.left + scroll.scrollLeft - offsets.x,\n    y: rect.top + scroll.scrollTop - offsets.y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const window = getWindow(element);\n  if (!isHTMLElement(element)) {\n    return window;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static' && !isContainingBlock(offsetParent))) {\n    return window;\n  }\n  return offsetParent || getContainingBlock(element) || window;\n}\n\nconst getElementRects = async function (_ref) {\n  let {\n    reference,\n    floating,\n    strategy\n  } = _ref;\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  return {\n    reference: getRectRelativeToOffsetParent(reference, await getOffsetParentFn(floating), strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      ...(await getDimensionsFn(floating))\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    clearTimeout(timeoutId);\n    io && io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 100);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          resizeObserver && resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo && cleanupIo();\n    resizeObserver && resizeObserver.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = size$1;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = inline$1;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = limitShift$1;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nexport { arrow, autoPlacement, autoUpdate, computePosition, flip, hide, inline, limitShift, platform, shift, size };\n","/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  return {\n    ...rect,\n    top: rect.y,\n    left: rect.x,\n    right: rect.x + rect.width,\n    bottom: rect.y + rect.height\n  };\n}\n\nexport { alignments, clamp, createCoords, evaluate, expandPaddingObject, floor, getAlignment, getAlignmentAxis, getAlignmentSides, getAxisLength, getExpandedPlacements, getOppositeAlignmentPlacement, getOppositeAxis, getOppositeAxisPlacements, getOppositePlacement, getPaddingObject, getSide, getSideAxis, max, min, placements, rectToClientRect, round, sides };\n"],"names":["computeCoordsFromPlacement","_ref","placement","rtl","coords","reference","floating","sideAxis","_floating_ui_utils__WEBPACK_IMPORTED_MODULE_0__","Qq","alignmentAxis","Wh","alignLength","I4","side","k3","isVertical","commonX","x","width","commonY","y","height","commonAlign","hp","computePosition","config","strategy","middleware","platform","validMiddleware","filter","Boolean","isRTL","rects","getElementRects","statefulPlacement","middlewareData","resetCount","i","length","name","fn","nextX","nextY","data","reset","initialPlacement","elements","detectOverflow","state","options","_await$platform$isEle","boundary","rootBoundary","elementContext","altBoundary","padding","ku","paddingObject","yd","element","clippingClientRect","JB","getClippingRect","isElement","contextElement","getDocumentElement","rect","offsetParent","getOffsetParent","offsetScale","getScale","elementClientRect","convertOffsetParentRelativeRectToViewportRelativeRect","top","bottom","left","right","arrow","axis","arrowDimensions","getDimensions","isYAxis","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","largestPossiblePadding","minPadding","VV","maxPadding","max","center","offset","uZ","shouldAddOffset","alignmentOffset","centerOffset","flip","_middlewareData$arrow","_middlewareData$flip","_middlewareData$flip2","_overflowsData$filter","_overflowsData$map$so","mainAxis","checkMainAxis","crossAxis","checkCrossAxis","fallbackPlacements","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","flipAlignment","detectOverflowOptions","isBasePlacement","pw","gy","push","KX","placements","overflow","overflows","overflowsData","sides","i8","every","nextIndex","index","nextPlacement","resetPlacement","d","sort","a","b","map","reduce","acc","convertValueToCoords","alignment","mainAxisMulti","includes","crossAxisMulti","rawValue","_middlewareData$offse","diffCoords","shift","limiter","Rn","mainAxisCoord","crossAxisCoord","minSide","maxSide","min","limitedCoords","getNodeName","node","nodeName","toLowerCase","getWindow","_node$ownerDocument","ownerDocument","defaultView","window","isNode","document","documentElement","value","Node","Element","isHTMLElement","HTMLElement","isShadowRoot","ShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle","test","isContainingBlock","webkit","isWebKit","css","transform","perspective","containerType","backdropFilter","some","willChange","contain","CSS","supports","isLastTraversableNode","getNodeScroll","scrollLeft","scrollTop","pageXOffset","pageYOffset","getParentNode","result","assignedSlot","parentNode","host","getOverflowAncestors","list","traverseIframes","_node$ownerDocument2","scrollableAncestor","getNearestOverflowAncestor","body","isBody","win","concat","visualViewport","frameElement","getCssDimensions","parseFloat","hasOffset","offsetWidth","offsetHeight","shouldFallback","floating_ui_utils","NM","$","unwrapElement","domElement","ze","getBoundingClientRect","Number","isFinite","noOffsets","getVisualOffsets","offsetLeft","offsetTop","includeScale","isFixedStrategy","isFixed","clientRect","scale","visualOffsets","shouldAddVisualOffsets","floatingOffsetParent","offsetWin","currentIFrame","iframeScale","iframeRect","clientLeft","paddingLeft","clientTop","paddingTop","getWindowScrollBarX","getClientRectFromClippingAncestor","clippingAncestor","getViewportRect","html","clientWidth","clientHeight","visualViewportBased","getDocumentRect","scroll","Fp","scrollWidth","scrollHeight","direction","getInnerBoundingClientRect","getTrueOffsetParent","polyfill","position","getContainingBlock","currentNode","getOffsetParentFn","getDimensionsFn","getRectRelativeToOffsetParent","isOffsetParentAnElement","offsets","offsetRect","clippingAncestors","getClippingElementAncestors","cache","cachedResult","get","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","hasFixedPositionAncestor","stopNode","ancestor","set","_c","firstClippingAncestor","clippingRect","accRect","getClientRects","Array","from","autoUpdate","update","frameId","ancestorScroll","ancestorResize","elementResize","ResizeObserver","layoutShift","IntersectionObserver","animationFrame","referenceEl","ancestors","forEach","addEventListener","passive","cleanupIo","observeMove","onMove","timeoutId","io","root","cleanup","clearTimeout","disconnect","refresh","skip","threshold","insetTop","GW","insetRight","rootMargin","isFirstUpdate","handleObserve","entries","ratio","intersectionRatio","setTimeout","e","observe","reobserveFrame","resizeObserver","firstEntry","target","unobserve","cancelAnimationFrame","requestAnimationFrame","prevRefRect","frameLoop","nextRefRect","removeEventListener","floating_ui_core","uY","RR","x7","Map","mergedOptions","platformWithCache","oo","Math","round","floor","createCoords","v","oppositeSideMap","oppositeAlignmentMap","start","end","clamp","evaluate","param","getSide","split","getAlignment","getOppositeAxis","getAxisLength","getSideAxis","getAlignmentAxis","getAlignmentSides","mainAlignmentSide","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","replace","getOppositeAxisPlacements","getSideList","isStart","lr","rl","getPaddingObject","rectToClientRect"],"sourceRoot":""}